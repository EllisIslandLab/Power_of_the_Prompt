generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String         @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               Role           @default(STUDENT)
  subscriptionStatus SubscriptionStatus @default(NONE)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  consultations Consultation[]
  sentMessages  Message[]      @relation("SentMessages")
  receivedMessages Message[]   @relation("ReceivedMessages")
  hostedVideoSessions VideoSession[] @relation("VideoSessionHost")
  participantVideoSessions VideoSession[] @relation("VideoSessionParticipants")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Enrollment {
  id            String        @id @default(cuid())
  userId        String
  courseType    CourseType
  paymentStatus PaymentStatus @default(PENDING)
  startDate     DateTime      @default(now())
  completionDate DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Consultation {
  id            String           @id @default(cuid())
  userId        String
  scheduledTime DateTime
  status        ConsultationStatus @default(SCHEDULED)
  notes         String?
  type          ConsultationType
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoSession VideoSession?
}

model VideoSession {
  id                   String              @id @default(cuid())
  sessionName          String
  jitsiRoomId          String              @unique
  hostUserId           String
  participantUserIds   String[]           // Array of user IDs
  sessionType          VideoSessionType   @default(FREE_CONSULTATION)
  scheduledStart       DateTime
  scheduledEnd         DateTime
  actualStart          DateTime?
  actualEnd            DateTime?
  stripePaymentIntentId String?
  sessionStatus        VideoSessionStatus @default(SCHEDULED)
  meetingNotes         String?            @db.Text
  recordingUrl         String?
  jitsiConfig          Json?              // Custom Jitsi configuration
  waitingRoomEnabled   Boolean            @default(true)
  maxParticipants      Int?               @default(10)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  host         User          @relation("VideoSessionHost", fields: [hostUserId], references: [id], onDelete: Cascade)
  participants User[]        @relation("VideoSessionParticipants")
  consultation Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?     @unique

  @@index([hostUserId])
  @@index([sessionStatus])
  @@index([scheduledStart])
}

model Message {
  id         String   @id @default(cuid())
  fromUserId String
  toUserId   String
  content    String   @db.Text
  threadId   String?
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())

  fromUser User @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
}

enum Role {
  STUDENT
  PREMIUM
  ADMIN
}

enum SubscriptionStatus {
  NONE
  ACTIVE
  CANCELLED
  EXPIRED
}

enum CourseType {
  STANDARD
  PREMIUM
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ConsultationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum ConsultationType {
  FREE
  PREMIUM
}

enum VideoSessionType {
  FREE_CONSULTATION
  PAID_SESSION
  GROUP_COACHING
  WORKSHOP
  OFFICE_HOURS
}

enum VideoSessionStatus {
  SCHEDULED
  ACTIVE
  COMPLETED
  CANCELLED
  NO_SHOW
}
